CREATE DATABASE school_database;

USE school_database;

CREATE TABLE INSTRUCTOR (
  InstructorID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  PPSNumber VARCHAR(20),
  FirstName VARCHAR(50),
  LastName VARCHAR(50),
  Email VARCHAR(100),
  Phone VARCHAR(20),
  Address VARCHAR(100),
  eirCode VARCHAR(10),
  City VARCHAR(50),
  County VARCHAR(50),
  Country VARCHAR(50)
);

CREATE TABLE INSTRUCTOR_QUALIFICATIONS (
  InstructorID INT NOT NULL,
  Education VARCHAR(50),
  Institution VARCHAR(50),
  PRIMARY KEY (InstructorID, Education),
  FOREIGN KEY (InstructorID) REFERENCES INSTRUCTOR(InstructorID)
);

CREATE TABLE STUDENT (
  StudentID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  PPSNumber VARCHAR(20),
  FirstName VARCHAR(50),
  LastName VARCHAR(50),
  Email VARCHAR(100),
  Phone VARCHAR(20),
  Address VARCHAR(100),
  eirCode VARCHAR(10),
  City VARCHAR(50),
  County VARCHAR(50),
  Country VARCHAR(50)
);

CREATE TABLE COURSE (
  CourseCode VARCHAR(20) NOT NULL PRIMARY KEY,
  InstructorID INT NOT NULL,
  CourseName VARCHAR(50),
  InstructorName VARCHAR(50),
  InstructorSurname VARCHAR(50),
  Subject VARCHAR(50),
  Credits INT,
  Room VARCHAR(20),
  Days VARCHAR(20),
  Time_Start TIME,
  Time_End TIME,
  Description VARCHAR(100),
  FOREIGN KEY (InstructorID) REFERENCES INSTRUCTOR(InstructorID)
);

CREATE TABLE ASSESSMENT (
  AssessmentID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  AssessmentName VARCHAR(50),
  Value DECIMAL(5,2)
);

CREATE TABLE STUDENT_ASSESSMENT (
  StudentAssessmentID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  StudentID INT NOT NULL,
  CourseCode VARCHAR(20) NOT NULL,
  AssessmentID INT NOT NULL,
  Grade DECIMAL(5,2),
  FOREIGN KEY (StudentID) REFERENCES STUDENT(StudentID),
  FOREIGN KEY (CourseCode) REFERENCES COURSE(CourseCode),
  FOREIGN KEY (AssessmentID) REFERENCES ASSESSMENT(AssessmentID)
);

CREATE TABLE STUDENT_ATTENDANCE (
  StudentAttendanceID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  StudentID INT NOT NULL,
  CourseCode VARCHAR(20) NOT NULL,
  Subject VARCHAR(50),
  Date DATE,
  AttendanceStatus VARCHAR(20),
  Notes VARCHAR(100),
  TotalNumberOfClasses INT,
  ClassesAttended INT,
  PercentageOfAttendance DECIMAL(5,2),
  FOREIGN KEY (StudentID) REFERENCES STUDENT(StudentID),
  FOREIGN KEY (CourseCode) REFERENCES COURSE(CourseCode)
);

CREATE TABLE STUDENT_COURSE (
  StudentCourseID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  StudentID INT NOT NULL,
  CourseCode VARCHAR(20) NOT NULL,
  IsEnroled BOOLEAN,
  StudentCourseDetails VARCHAR(100),
  FOREIGN KEY (StudentID) REFERENCES STUDENT(StudentID),
  FOREIGN KEY (CourseCode) REFERENCES COURSE(CourseCode)
);

CREATE TABLE INSTRUCTOR_COURSE (
  InstructorCourseID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  InstructorID INT NOT NULL,
  CourseCode VARCHAR(20) NOT NULL,
  InstructorCourseDetails VARCHAR(100),
  FOREIGN KEY (InstructorID) REFERENCES INSTRUCTOR(InstructorID),
  FOREIGN KEY (CourseCode) REFERENCES COURSE(CourseCode)
);

CREATE TABLE PAYSLIP (
    Payslip_id INT NOT NULL AUTO_INCREMENT,
    InstructorId INT NOT NULL,
    Employee_name VARCHAR(255) NOT NULL,
    Employee_number VARCHAR(255) NOT NULL,
    Department VARCHAR(255) NOT NULL,
    Cost FLOAT NOT NULL,
    Frequency VARCHAR(255) NOT NULL,
    Pay_period VARCHAR(255) NOT NULL,
    PPS_number VARCHAR(255) NOT NULL,
    Payment_date DATE NOT NULL,
    Basic_pay FLOAT NOT NULL,
    Overtime FLOAT NOT NULL,
    Bonus FLOAT NOT NULL,
    Paye FLOAT NOT NULL,
    PRSI FLOAT NOT NULL,
    USC FLOAT NOT NULL,
    Gross_pay FLOAT NOT NULL,
    Non_taxable_pay FLOAT NOT NULL,
    Taxable_pay FLOAT NOT NULL,
    Tax_credit FLOAT NOT NULL,
    Standard_cut_off FLOAT NOT NULL,
    Tax_paid FLOAT NOT NULL,
    Tax_usc_status VARCHAR(255) NOT NULL,
    Emer_st_per FLOAT NOT NULL,
    PRSI_code VARCHAR(255) NOT NULL,
    TotalIns_wk FLOAT NOT NULL,
    Grosspay FLOAT NOT NULL,
    TotalDeds FLOAT NOT NULL,
    NonTax_adjs FLOAT NOT NULL,
    Rounding FLOAT NOT NULL,
    NettPay FLOAT NOT NULL,
    PayMethod VARCHAR(255) NOT NULL,
    PRIMARY KEY (payslip_id),
    FOREIGN KEY (InstructorId) REFERENCES INSTRUCTOR(InstructorId)
);
